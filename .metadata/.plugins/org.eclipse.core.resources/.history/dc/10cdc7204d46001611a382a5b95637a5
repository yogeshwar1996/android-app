package com.bffmedia.hour21audio;
import java.io.IOException;
import android.media.MediaPlayer;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.Toast;
import android.app.Activity;
import android.content.Intent;
import android.content.res.AssetFileDescriptor;

public class MainActivity extends Activity
{
	ProgressBar mHorizontalProgressBar;
	MediaPlayer mediaPlayer = new MediaPlayer();
	AssetFileDescriptor audioFileDescriptor;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		mHorizontalProgressBar = (ProgressBar)findViewById(R.id.progressBar2);
		final ShowProgressTask showTask = new ShowProgressTask();
		
		
	   Button song = (Button) findViewById(R.id.button1);
		song.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				Toast.makeText(getApplicationContext(), "Hun Te Gana Wajju",
						Toast.LENGTH_LONG).show();
				showTask.execute();
			
				try {
					audioFileDescriptor = getAssets().openFd("helloworld.mp3");	
					mediaPlayer.setDataSource(audioFileDescriptor.getFileDescriptor(),audioFileDescriptor.getStartOffset(),audioFileDescriptor.getLength());
					mediaPlayer.prepare();
					mediaPlayer.start();
				} catch (IOException e) {
					e.printStackTrace();
				}
				final{
					showTask.execute();
				}
			}
		});
	}
	@Override
	protected void onResume() {
		super.onResume();
		try {
			audioFileDescriptor = getAssets().openFd("bus_song.mp3");	
			mediaPlayer.setDataSource(audioFileDescriptor.getFileDescriptor(),audioFileDescriptor.getStartOffset(),audioFileDescriptor.getLength());
			mediaPlayer.prepare();
			mediaPlayer.start();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	@Override
	protected void onPause() {
		super.onPause();
		mediaPlayer.release();
	}
	//////////////////////////////////////class
	private class ShowProgressTask extends AsyncTask<Void, Integer, Integer> {
		@Override
		protected  void onPreExecute (){
		
		}
		@Override
		protected Integer doInBackground(Void... params) {
			for (int i=0; i<=100; i++){
				try {
					Thread.sleep(100);
					publishProgress(i);
				} catch (InterruptedException e) {
					return -1;
				}
			}
			return 100;
		}
		@Override
		protected void onProgressUpdate(Integer...progess) {
			int progress = progess[0];
			mHorizontalProgressBar.setProgress(progress);
		
		}
		@Override
		protected  void onPostExecute (Integer result){
		
		}
	}
}

